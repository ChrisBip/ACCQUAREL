/* 
* The martix library of the A.S.P.I.C. 
 * Written and directed by François Lodier francois.lodier@gmail.com.
 *
 * Copyright (C) 2005  François Lodier
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */
#include "matrix.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// function that converts a matrix type to a string.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const string matrix::matrixType2String(const matrix::matrixType & type) 
{
	
	switch (type) {
		case matrix::FULL:
			return "Full"; 
			
		case matrix::NONE:
			return "None"; 
			
		case matrix::SPARSE:
			return "Sparse"; 
			
		case matrix::SYMETRIC_FULL:
			return "SymetricFull"; 
			
		case matrix::SYMETRIC_SPARSE:
			return "SymetricSparse"; 
			
		default:
			return "";
	}
	
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// function that converts a string to a matrix type.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const matrix::matrixType matrix::string2MatrixType(const string & matrixTypeStr) 
{
		if(matrixTypeStr == "Full") {
			return matrix::FULL;
		}
	
	if(matrixTypeStr == "SymetricFull") {
		return matrix::SYMETRIC_FULL;
	}		
	
	if(matrixTypeStr == "Sparse") {
		return matrix::SPARSE;
	}
	
	if(matrixTypeStr == "SymetricSparse") {
		return matrix::SYMETRIC_SPARSE;
	}	
	
	return matrix::NONE;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The extern operator << for the matrix type.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ostream & operator<<(ostream & out , const matrix::matrixType & type)
{
	out << matrix::matrixType2String(type);
	return out;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The default constructor.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
matrix::matrix(void)
: NbrOfColumns(0) , NbrOfRows(0) , Type(NONE)
{
	;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The default constructor.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
matrix::~matrix(void)
{
	clear();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The Clear Method.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void matrix::clear(void)
{
	NbrOfColumns = 0;
	NbrOfRows = 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The Copy Method.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void matrix::copy(const matrix & m)
{
	setNbrOfColumns(m.getNbrOfColumns());
	setNbrOfRows(m.getNbrOfRows());
	setMatrixType(m.getMatrixType());
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The Empty Method.
bool matrix::empty(void) const
{
	if(getNbrOfColumns() == 0 || getNbrOfRows() == 0) {
		return true;
	} else {
		return false;
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The GET number of rows Method.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const int & matrix::getNbrOfColumns(void) const
{
	return NbrOfColumns;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The GET number of rows Method.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const int & matrix::getNbrOfRows(void) const
{
	return NbrOfRows;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The GET type Method.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const matrix::matrixType & matrix::getMatrixType(void) const
{
	return Type;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The SET type Method.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void matrix::setNbrOfColumns(const int & nbrOfColumns)
{
	NbrOfColumns = nbrOfColumns;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The SET type Method.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void matrix::setNbrOfRows(const int & nbrOfRows)
{
	NbrOfRows = nbrOfRows;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The SET type Method.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void matrix::setMatrixType(const matrixType & type)
{
	Type = type;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// dummy method to compute the trace of the matrix.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
double matrix::trace(void) const
{
	double trace = 0;
	int row;

	// When the number of columns is different from the number of
	// rows I don't know what to do. Here I'll print a warning.
	if(getNbrOfColumns() != getNbrOfRows()) {
		cerr << "Warning : in double matrix::trace(void) const" << endl;
		cerr << "Warning : unable to compute the trace of a non square matrix." << endl;
		cerr << "Warning : 0 will be returned" << endl; 
		return 0;
	}
	
	// When it is all right, we just perform the computation.
	for(row=0 ; row < getNbrOfRows() ; row++) {
		trace += getCoefficient(row,row);
	}

	// return the value.
	return trace;
}
