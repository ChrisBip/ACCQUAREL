/* 
* The martix library of the A.S.P.I.C. 
 * Written and directed by François Lodier francois.lodier@gmail.com.
 *
 * Copyright (C) 2005  François Lodier
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */
#include "xmlTensorParser.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Constructor.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
xmlTensorParser::xmlTensorParser(void)
: xmlParser()
{
	;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Constructor.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
xmlTensorParser::xmlTensorParser(DOMElement * rootElement)
: xmlParser(rootElement)
{
	;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Destructor.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
xmlTensorParser::~xmlTensorParser(void)
{
	;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GET a coefficient.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
tensorCoefficientData xmlTensorParser::getCoefficient(int item) const
{
	assert(item >=0);
	assert(item < getNbrOfCoefficients());
	
	
	DOMElement * coefficientElement =(DOMElement *) getElementsByTagName(getCoefficientTagName())->item(item);
	tensorCoefficientData coefficient;
	
	
	if(coefficientElement == NULL) {
		
		coefficient.Row = -1;
		coefficient.Column = -1;
		coefficient.Width = -1;
		coefficient.Height = -1;
		coefficient.Value = 0;
		
		return coefficient;
	}
	
	coefficient.Row = getNodeIntegerValue(getElementByTagName(coefficientElement , getCoefficientRowTagName()));
	coefficient.Column = getNodeIntegerValue(getElementByTagName(coefficientElement , getCoefficientColumnTagName()));
	coefficient.Height = getNodeIntegerValue(getElementByTagName(coefficientElement , getCoefficientWidthTagName()));
	coefficient.Width = getNodeIntegerValue(getElementByTagName(coefficientElement , getCoefficientHeightTagName()));
	coefficient.Value = getNodeDoubleValue(getElementByTagName(coefficientElement , getCoefficientValueTagName()));
	
	assert( coefficient.Row >= 0 );
	assert( coefficient.Row < getNbrOfRows() );
	
	assert( coefficient.Column >= 0 );
	assert( coefficient.Column < getNbrOfColumns() );
	
	assert( coefficient.Width >= 0 );
	assert( coefficient.Width < getNbrOfWidths() );
	
	assert( coefficient.Height >= 0 );
	assert( coefficient.Height < getNbrOfHeights() );
	
	return coefficient;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GET for the coefficient tag name.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const string xmlTensorParser::getCoefficientTagName(void)
{
	return "Coefficient";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GET for the coefficient column tag name.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const string xmlTensorParser::getCoefficientColumnTagName(void)
{
	return "Column";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GET for the coefficient height tag name.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const string xmlTensorParser::getCoefficientHeightTagName(void)
{
	return "Height";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GET for the coefficient row tag name.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const string xmlTensorParser::getCoefficientRowTagName(void)
{
	return "Row";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GET for the number of coefficients.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const string xmlTensorParser::getCoefficientValueTagName(void)
{
	return "Value";
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GET for the coefficient width tag name.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const string xmlTensorParser::getCoefficientWidthTagName(void)
{
	return "Width";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GET for the number of coefficients.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int xmlTensorParser::getNbrOfCoefficients(void) const
{
	return getNbrOfElementsWithTagName(getCoefficientTagName());
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GET for the number of columns.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int xmlTensorParser::getNbrOfColumns(void) const
{
	return getNodeIntegerValue(getElementByTagName(getNbrOfColumnsTagName()));
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GET for the number of columns tag name.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const string xmlTensorParser::getNbrOfColumnsTagName(void)
{
	return "NbrOfColumns";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GET for the number of heights.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int xmlTensorParser::getNbrOfHeights(void) const
{
	return getNodeIntegerValue(getElementByTagName(getNbrOfHeightsTagName()));
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GET for the number of heights tag name.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const string xmlTensorParser::getNbrOfHeightsTagName(void)
{
	return "NbrOfHeights";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GET for the number of rows.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int xmlTensorParser::getNbrOfRows(void) const
{
	return getNodeIntegerValue(getElementByTagName(getNbrOfRowsTagName()));
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GET for the number of rows tag name.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const string xmlTensorParser::getNbrOfRowsTagName(void)
{
	return "NbrOfRows";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GET for the number of widths.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int xmlTensorParser::getNbrOfWidths(void) const
{
	return getNodeIntegerValue(getElementByTagName(getNbrOfWidthsTagName()));
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GET for the number of widths tag name.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const string xmlTensorParser::getNbrOfWidthsTagName(void)
{
	return "NbrOfWidths";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GET for the matrix type.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
tensor * xmlTensorParser::getTensor(void) const
{
	switch (getTensorType()) {
		
		case tensor::FULL :
			return getTensorFull();
			
		case tensor::NONE :
			return NULL;
			
		case tensor::SPARSE :
			return NULL;
			
		case tensor::SYMETRIC_FULL:				
			return getTensorSymetricFull();
			
		case tensor::SYMETRIC_SPARSE :
			return NULL;
			
		default:
			return NULL;
	}
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GET for the matrix type.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
tensor * xmlTensorParser::getTensorSymetricFull(void) const
{
	assert(getTensorType() == tensor::SYMETRIC_FULL);
	
	assert(getNbrOfWidths() == getNbrOfHeights());
	assert(getNbrOfRows() == getNbrOfColumns());
	assert(getNbrOfRows() == getNbrOfWidths());
	
	int i;
	tensorCoefficientData coef;
	tensorSymetric * t = new tensorSymetric;
	
	t->setTensorSize(getNbrOfRows());
	t->setAllCoefficients(0);
	
	for(i=0 ;  i<getNbrOfCoefficients() ; i++) {
		coef = getCoefficient(i);
		t->setCoefficient(coef.Row , coef.Column, coef.Width , coef.Height , coef.Value);	
	}	
	
	return (tensor *) t;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GET for the matrix type.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
tensor * xmlTensorParser::getTensorFull(void) const
{
	assert(getTensorType() == tensor::FULL);
	
	int i;
	tensorCoefficientData coef;
	tensorFull * t = new tensorFull;
	
	t->setTensorSize(getNbrOfRows(),getNbrOfColumns(), getNbrOfWidths() , getNbrOfHeights());
	t->setAllCoefficients(0);
	
	for(i=0 ;  i<getNbrOfCoefficients() ; i++) {
		coef = getCoefficient(i);
		t->setCoefficient(coef.Row , coef.Column, coef.Width , coef.Height , coef.Value);	
	}	
	
	return (tensor *) t;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GET for the tensor type.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
tensor::tensorType xmlTensorParser::getTensorType(void) const
{
	return tensor::string2TensorType(getTensorTypeString());
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GET for the tensor type string.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
string xmlTensorParser::getTensorTypeString(void) const
{	
	return getAttributeValue(getTensorTypeAttributeName());
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GET for the tensor type tag name.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const string xmlTensorParser::getTensorTypeAttributeName(void)
{
	return "TensorType";
}

