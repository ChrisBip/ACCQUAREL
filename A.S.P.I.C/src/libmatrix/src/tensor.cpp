/* 
* The martix library of the A.S.P.I.C. 
 * Written and directed by François Lodier francois.lodier@gmail.com.
 *
 * Copyright (C) 2005  François Lodier
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */
#include "tensor.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// function that converts a tensor type to a string.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const string tensor::tensorType2String(const tensorType & type) 
{
	
	switch (type) {
		case tensor::FULL:
			return "Full"; 
			
		case tensor::NONE:
			return "None"; 
			
		case tensor::SPARSE:
			return "Sparse"; 
			
		case tensor::SYMETRIC_FULL:
			return "SymetricFull"; 
			
		case tensor::SYMETRIC_SPARSE:
			return "SymetricSparse"; 
			
		default:
			return "";
	}
	
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// function that converts a string to a tensor type.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const tensor::tensorType tensor::string2TensorType(const string & tensorTypeStr) 
{
	if(tensorTypeStr == "Full") {
		return tensor::FULL;
	}
	
	if(tensorTypeStr == "SymetricFull") {
		return tensor::SYMETRIC_FULL;
	}		
	
	if(tensorTypeStr == "Sparse") {
		return tensor::SPARSE;
	}
	
	if(tensorTypeStr == "SymetricSparse") {
		return tensor::SYMETRIC_SPARSE;
	}	
	
	return tensor::NONE;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The extern operator << for the tensor type.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ostream & operator<<(ostream & out , const tensor::tensorType & type)
{
	out << tensor::tensorType2String(type);
	return out;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The default constructor.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
tensor::tensor(void)
: NbrOfColumns(0) , NbrOfHeights(0) , NbrOfRows(0) , NbrOfWidths(0) , Type(NONE)
{
	;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The default constructor.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
tensor::~tensor(void)
{
	clear();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The Clear Method.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void tensor::clear(void)
{
	NbrOfColumns = 0;
	NbrOfRows = 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The Copy Method.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void tensor::copy(const tensor & t)
{
	setNbrOfColumns(t.getNbrOfColumns());
	setNbrOfHeights(t.getNbrOfHeights());
	setNbrOfRows(t.getNbrOfRows());
	setNbrOfWidths(t.getNbrOfWidths());
	setTensorType(t.getTensorType());
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The Empty Method.
bool tensor::empty(void) const
{
	if(getNbrOfColumns() == 0 || getNbrOfRows() == 0) {
		return true;
	} else {
		return false;
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The GET number of rows Method.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const int & tensor::getNbrOfColumns(void) const
{
	return NbrOfColumns;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The GET number of rows Method.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const int & tensor::getNbrOfHeights(void) const
{
	return NbrOfHeights;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The GET number of rows Method.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const int & tensor::getNbrOfRows(void) const
{
	return NbrOfRows;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The GET number of rows Method.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const int & tensor::getNbrOfWidths(void) const
{
	return NbrOfWidths;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The GET type Method.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const tensor::tensorType & tensor::getTensorType(void) const
{
	return Type;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The SET type Method.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void tensor::setNbrOfColumns(const int & nbrOfColumns)
{
	NbrOfColumns = nbrOfColumns;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The SET type Method.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void tensor::setNbrOfHeights(const int & nbrOfHeights)
{
	NbrOfHeights = nbrOfHeights;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The SET type Method.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void tensor::setNbrOfRows(const int & nbrOfRows)
{
	NbrOfRows = nbrOfRows;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The SET type Method.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void tensor::setNbrOfWidths(const int & nbrOfWidths)
{
	NbrOfWidths = nbrOfWidths;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The SET type Method.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void tensor::setTensorType(const tensorType & type)
{
	Type = type;
}

