/* 
* The coniguration manager library of A.S.P.I.C. 
 * Written and directed by François Lodier support.aspic@gmail.com.
 *
 * Copyright (C) 2005  François Lodier
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */
#include "cmdLineParser.h"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Constructor.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
cmdLineParser::cmdLineParser(void)
{
	clear();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Constructor with cmd line arguments.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
cmdLineParser::cmdLineParser(int argc , char * argv[])
{
	clear();
	setArguments(argc,argv);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copy Constructor.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
cmdLineParser::cmdLineParser(const cmdLineParser & cmdArgs)
{
	clear();
	copy(cmdArgs);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Destructor.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
cmdLineParser::~cmdLineParser(void)
{
	clear();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The BEGIN : thos method returns the first element of the map containing the arguments.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
map<string,string>::const_iterator cmdLineParser::begin(void) const
{
	 return Arguments.begin();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The clear Method.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cmdLineParser::clear(void) 
{
	ProgramName = "";
	Arguments.clear();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The copy Method.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cmdLineParser::copy(const cmdLineParser & cmdArgs)
{
	
	if(cmdArgs.empty()) {
		clear();
		return;
	}
	
	setArguments(cmdArgs.getArguments());
	setProgramName(cmdArgs.getProgramName());
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The EMPTY Method.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool cmdLineParser::empty(void) const
{
	if(Arguments.empty()) {
		return true;
	} else {
		return false;
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The END : thos method returns the first element of the map containing the arguments.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
map<string,string>::const_iterator cmdLineParser::end(void) const
{
	return Arguments.end();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET for the option associated with a cmd line argument.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
string cmdLineParser::getArgumentOption(const string & argName) const
{
	
	map<string,string>::const_iterator argPos = Arguments.find(argName);

	if(argPos == end()) {
		return "";
	} else {
		return argPos->second;
	}

}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET for the cmd line arguments.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const map<string,string> & cmdLineParser::getArguments(void) const
{
	return Arguments;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET for the number of arguments in the cmd line.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int cmdLineParser::getNbrOfArguments(void) const
{
	return (int)Arguments.size();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET for the number of arguments in the cmd line.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const string & cmdLineParser::getProgramName(void) const
{
	return ProgramName;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET for the option associated with a cmd line argument.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool cmdLineParser::hasArgument(const string & argName) const
{
	map<string,string>::const_iterator argPos = Arguments.find(argName);
	if(argPos == end()) {
		return false;
	} else {
		return true;
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for an argument in the cmd line.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
map<string,string>::iterator cmdLineParser::setArgument(const string & argument , const string & option)
{
	
	string argName = argument;
	
	while(argName[0] == '-') {
		argName.erase(0,1);
	}
	
	assert(option[0] != '-');
	
	if(Arguments.find(argName) != Arguments.end()) {
		return Arguments.end();
	}
	
	pair<map<string,string>::iterator,bool> insertionState = Arguments.insert(pair<string,string>(argName,option));
	
	if(insertionState.second == false) {
		return Arguments.end();
	} else {
		return insertionState.first;
	}
	
	
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for an argument in the cmd line.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cmdLineParser::setArguments(int argc , char * argv[])
{
	
	assert(argc >=0);

	string argument , option;
	
	if(argc == 0) {
		return;
	}
	
	setProgramName(argv[0]);
	argc--;
	argv++;
		
	while(argc > 0) {
	
		argument = *argv;
		argv++;
		argc--;
		
		if(argc > 0 && argv[0][0] != '-') {
			option = *argv;
			argv++;
			argc--;
		} else {
			option = "";
		}
		
		setArgument(argument,option);
	}

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for map.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cmdLineParser::setArguments(const map<string,string> & arguments)
{
	Arguments = arguments;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for map.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void cmdLineParser::setProgramName(const string & programName) 
{
	ProgramName = programName;
}