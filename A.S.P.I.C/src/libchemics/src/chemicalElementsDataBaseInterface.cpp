/* 
* The chemics library of A.S.P.I.C. 
 * Written and directed by François Lodier francois.lodier@gmail.com.
 *
 * Copyright (C) 2005  François Lodier
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */
#include <aspicConfiguration.h>
#include "chemicalElementsDataBaseInterface.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// La base de données qui sera instancié à la connection ... 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
xmlChemicalElementsDataBaseInterface * xmlChemicalElementsDataBaseInterface::ChemicalElementsDataBase = NULL;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Le nom du tag qui contient un isotope.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const string xmlChemicalElementsDataBaseInterface::ChemicalElementIsotopeTagName = "Isotope";

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Le nom du tag qui contientle nombre de neutrons d'un isotope.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const string xmlChemicalElementsDataBaseInterface::ChemicalElementIsotopeNbrOfNeutronsTagName = "NbrOfNeutrons";

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Le nom du tag qui contientla probabilité d'existance d'un isotope.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const string xmlChemicalElementsDataBaseInterface::ChemicalElementIsotopeProbabilityTagName = "Probability";

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Le nom du tag qui contient la clé de l'élément chimique.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const string xmlChemicalElementsDataBaseInterface::ChemicalElementKeyAttributeName = "ElementKey";

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Le nom du tag qui contient le nom de l'élément chimique.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const string xmlChemicalElementsDataBaseInterface::ChemicalElementNameTagName = "Name";

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Le nom du tag qui contient le nombre de protons.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const string xmlChemicalElementsDataBaseInterface::ChemicalElementNbrOfProtonsTagName = "NbrOfProtons";

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Le nom du tag qui contient le symbole de l'élément chimique.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const string xmlChemicalElementsDataBaseInterface::ChemicalElementSymbolTagName = "Symbol";

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Le nom du tag qui contientl'élément chimique.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const string xmlChemicalElementsDataBaseInterface::ChemicalElementTagName = "ChemicalElement";

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The constructor. 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
xmlChemicalElementsDataBaseInterface::xmlChemicalElementsDataBaseInterface(void)
	: xmlDataBaseInterface(ChemicalElementTagName , ChemicalElementKeyAttributeName)
{
	;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The destructor. 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
xmlChemicalElementsDataBaseInterface::~xmlChemicalElementsDataBaseInterface(void)
{
	;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// STATIC Method to connect to the data base. 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void xmlChemicalElementsDataBaseInterface::connect(void)
{
	if(ChemicalElementsDataBase != NULL) {
		return;
	}
	
	ChemicalElementsDataBase = new xmlChemicalElementsDataBaseInterface;
	ChemicalElementsDataBase->load(ChemicalElementsDataBase->getDocumentURI());
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// STATIC Method to know if we are connected to any data base.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool xmlChemicalElementsDataBaseInterface::connected(void)
{
	if(ChemicalElementsDataBase == NULL) {
		return false;
	} else {
		return true;
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method to disconnect from the data base. 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void xmlChemicalElementsDataBaseInterface::disconnect(void)
{
	if(ChemicalElementsDataBase != NULL) {
		delete ChemicalElementsDataBase;
		ChemicalElementsDataBase = NULL;
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Static Method GET for a chemical element. 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chemicalElement xmlChemicalElementsDataBaseInterface::getChemicalElement(const string & elementKey)
{
	// When we are not connected to the data base we need to connect.
	// user will have to disconnect.
	if(!connected()) {
		connect();
	}
	
	return ChemicalElementsDataBase->getElement(ChemicalElementsDataBase->getElementById(elementKey));
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Static Method GET for a chemical element. 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chemicalElement xmlChemicalElementsDataBaseInterface::getChemicalElement(int item)
{
	// When we are not connected to the data base we need to connect.
	// user will have to disconnect.
	if(!connected()) {
		connect();
	}
	
	assert(item >= 0);
	assert(item < getNbrOfChemicalElements());
	
	return  ChemicalElementsDataBase->getElement((DOMElement *)ChemicalElementsDataBase->getDataBaseEntry(item));
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method to find where the data base is stored.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
string xmlChemicalElementsDataBaseInterface::getDocumentURI(void) const
{
	return aspicConfiguration::getChemicalElementsDataBasePath();
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET for a chemical element. 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chemicalElement xmlChemicalElementsDataBaseInterface::getElement(DOMElement * rootElement) const
{
	chemicalElement element;
	
	if(rootElement == NULL) {
		element.clear();
		return element;
	}
	// Get the Key of the element.
	element.setChemicalElementKey(getAttributeValue(rootElement,ChemicalElementKeyAttributeName));

	// Get the name of the element.
	element.setName(getNodeStringValue(getElementByTagName(rootElement,ChemicalElementNameTagName),Remove_White_Space));

	// Get the number of protons of the element.
	element.setNbrOfProtons(getNodeIntegerValue(getElementByTagName(rootElement,ChemicalElementNbrOfProtonsTagName)));
	
	// Get the Symbol of the element.
	element.setSymbol(getNodeStringValue(getElementByTagName(rootElement,ChemicalElementSymbolTagName),Remove_White_Space));

	
	//////////////////////////////////////////////////////////////////////////////////////////////
	// Récupération des isotopes....
	//
	// On récupère le noeud et on regarde ce qu'il y a dedans. Lorsque l'on ne trouve rien alors
	// on met un isotope avec zéro neutron et une probabilité qui est nulle.
	///////////////////////////////////////////////////////////////////////////////////////////////
	DOMNodeList * isotopeNodeList = getElementsByTagName(rootElement,ChemicalElementIsotopeTagName);
	DOMElement * isotopeElement;
	int  i , nbrOfIsotopes;
	pair<int,double> isotope;

	if(isotopeNodeList == NULL || (nbrOfIsotopes=isotopeNodeList->getLength()) == 0) {
		element.setNbrOfIsotopes(1);
		element.setIsotope(0,0,0);
		return element;
	}
	 
	element.setNbrOfIsotopes(nbrOfIsotopes);
	
	for(i=0 ; i < nbrOfIsotopes ; i++) {
		isotopeElement = (DOMElement *) isotopeNodeList->item(i);
		isotope.first = getNodeIntegerValue(getElementByTagName(isotopeElement,ChemicalElementIsotopeNbrOfNeutronsTagName));
		isotope.second = getNodeDoubleValue(getElementByTagName(isotopeElement,ChemicalElementIsotopeProbabilityTagName));
		element.setIsotope(i,isotope);
	}
	
	return element;
}	

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Static Method GET for the number of chemical elements in the database.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int xmlChemicalElementsDataBaseInterface::getNbrOfChemicalElements(void)
{
	if(!connected()) {
		connect();
	}
	
	return ChemicalElementsDataBase->getNbrOfEntries();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method to find where syntaxic rules of the data base are stored. 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
string xmlChemicalElementsDataBaseInterface::getSchemaURI(void) const
{
	return aspicConfiguration::getChemicalElementsDataBaseSchemaPath();
}

