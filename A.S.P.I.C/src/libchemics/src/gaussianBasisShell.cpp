/* 
 * The chemics library of A.S.P.I.C. 
 * Written and directed by François Lodier francois.lodier@gmail.com.
 *
 * Copyright (C) 2005  François Lodier
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */
#include "gaussianBasisShell.h"
#include "xmlShellTypesDataBaseInterface.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Default constructor.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
gaussianBasisShell::gaussianBasisShell(void)
	: contractions() , shellType()
{
	;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copy constructor.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
gaussianBasisShell::gaussianBasisShell(const gaussianBasisShell & basisShell)
	: contractions() , shellType()
{
	copy(basisShell);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Destructor.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
gaussianBasisShell::~gaussianBasisShell(void)
{
	clear();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method CLEAR.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void gaussianBasisShell::clear(void)
{
	contractions::clear();
	shellType::clear();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method COPY.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void gaussianBasisShell::copy(const gaussianBasisShell & basisShell)
{
	contractions::copy(basisShell);
	shellType::copy(basisShell);
	setCenter(basisShell.getCenter());
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET for a basis function from the shell.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
gaussianBasisFunction gaussianBasisShell::getBasisFunction(int item) const
{	
	assert(item > 0);
	assert(item < getNbrOfBasisFunctions());

	gaussianBasisFunction basisFunction;

	basisFunction.setContractions(*this);
	basisFunction.setCenter(getCenter());
	basisFunction.setMonomeDegree(getMonomeDegree(item));
	
	return basisFunction;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET for the center of the shell
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const dpoint<3> & gaussianBasisShell::getCenter(void) const
{
	return Center;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for the center of the shell.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void gaussianBasisShell::setCenter(const dpoint<3> & center)
{
	Center = center;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method to write a Gaussian Basis Shell in a out stream.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void gaussianBasisShell::write(ostream & out) const
{
	/** TODO **/
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Operator << for a gaussianBasisShell.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ostream & operator<< (ostream & out , const gaussianBasisShell & basisShell)
{
	basisShell.write(out);
	return out;
}

