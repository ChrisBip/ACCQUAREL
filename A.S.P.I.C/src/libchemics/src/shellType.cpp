/* 
 * The chemics library of A.S.P.I.C. 
 * Written and directed by François Lodier francois.lodier@gmail.com.
 *
 * Copyright (C) 2005  François Lodier
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */
#include "shellType.h"
#include "xmlShellTypesDataBaseInterface.h"
#include <string4Polynomes.h>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The Default constructor.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
shellType::shellType(void) 
{
	clear();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The COPY constructor.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
shellType::shellType(const shellType & basisShellType) 
{
	copy(basisShellType);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The destructor.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
shellType::~shellType(void) 
{
	clear();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The CLEAR method.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void shellType::clear(void) 
{
	ShellTypeKey = "";
	ShellTypeName = "";
	MonomeDegrees.clear();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The COPY method.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void shellType::copy( const shellType & gbst) 
{
	setShellTypeKey(gbst.getShellTypeKey());
	setShellTypeName(gbst.getShellTypeName());
	setMonomeDegrees(gbst.getMonomeDegrees());
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The EMPTY method.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool shellType::empty(void) const
{
	if(getNbrOfBasisFunctions() == 0 ) {
		return true;
	} else {
		return false;
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET for the higher degree of a monome.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int shellType::getHigherDegree(void) const
{
	int nbrOfBasisFunctions , dim , basisFunction , higherDegree;
	ipoint<3> degree;
	
	higherDegree = 0;
	nbrOfBasisFunctions = getNbrOfBasisFunctions(); 
	
	for(basisFunction = 0 ; basisFunction < nbrOfBasisFunctions ; basisFunction++) {
		
		degree = getMonomeDegree(basisFunction);
		
		for( dim = 0 ; dim < 3 ; dim++) {
			
			higherDegree = max(higherDegree , degree[dim]);
		
		} // fin du for sur la dimension. 
	
	} // fin du for sur les fonctions de base.
	
	return higherDegree;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET for the degree of a monome.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const ipoint<3> & shellType::getMonomeDegree(int item) const
{
	assert(item >= 0);
	assert(item < getNbrOfBasisFunctions());
	
	return MonomeDegrees[item];	
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET for all the degrees of the monomes in the shell.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const containor< ipoint<3> > & shellType::getMonomeDegrees(void) const
{
	return MonomeDegrees;	
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET for the number of basis functions.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int shellType::getNbrOfBasisFunctions(void) const
{
	return MonomeDegrees.getSizes();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET for the string that is the key of the shell type in the data base.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const string & shellType::getShellTypeKey(void) const
{
	return ShellTypeKey;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET for the string that "defines" the type of the shell.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const string & shellType::getShellTypeName(void) const
{
	return ShellTypeName;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// operator =
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
shellType & shellType::operator=(const shellType & basisShellType)
{
	copy(basisShellType);
	return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for the degree of a monome.
//
// Warning : the parameter item must be a non negative integer and strictly less
// than the value returneb by the getNbrOfBasisFunctions() method.
//
// Warning : the parameter monomeDegree must have all his componant non negative.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void shellType::setMonomeDegree(int item , const ipoint<3> & monomeDegree) 
{
  assert(item >= 0);
  assert(item < getNbrOfBasisFunctions());
  
  assert(monomeDegree[0] >= 0);
  assert(monomeDegree[1] >= 0);
  assert(monomeDegree[2] >= 0);
  
  MonomeDegrees[item] = monomeDegree;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for the degree of a monome.
//
// Warning : the parameter item must be a non negative integer and strictly less
// than the value returneb by the getNbrOfBasisFunctions() method.
//
// Warning : the parameter monomeDegree must have all his componant non negative.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void shellType::setMonomeDegree(int item , int degree_x , int degree_y , int degree_z) 
{
	assert(item >= 0);
	assert(item < getNbrOfBasisFunctions());

	assert(degree_x >= 0);
	assert(degree_y >= 0);
	assert(degree_z >= 0);

	MonomeDegrees[item].setDatas(degree_x,degree_y,degree_z);
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for the degree of a monome.
//
// Warning : the parameter item must be a non negative integer and strictly less
// than the value returneb by the getNbrOfBasisFunctions() method.
//
// Warning : the parameter monomeDegree must have all his componant non negative.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void shellType::setMonomeDegrees(const containor< ipoint<3> > & degrees) 
{

	int i , nbrOfBasisFunctions = degrees.getSizes();
	
	if(nbrOfBasisFunctions == 0) {
		clear();
		return;
	}
	
	setNbrOfBasisFunctions(nbrOfBasisFunctions);

	for(i=0 ; i < nbrOfBasisFunctions ; i++) {

		assert(degrees[i][0] >= 0);
		assert(degrees[i][1] >= 0);
		assert(degrees[i][2] >= 0);
		
		MonomeDegrees[i] = degrees[i];	
	}
	
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for the number of basis functions.
// 
// @warning the parameter number of basis functions must be strictly positive, if you want to set this parameter to zero
// consider the clear method.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void shellType::setNbrOfBasisFunctions(int nbrOfBasisFunctions)
{
	assert( nbrOfBasisFunctions > 0);

	if(nbrOfBasisFunctions == getNbrOfBasisFunctions()) {
		return;
	}
	
	MonomeDegrees.setSizes(nbrOfBasisFunctions);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for the shell type.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void shellType::setShellType(const shellType & shellType)
{
	copy(shellType);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for the shell type.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void shellType::setShellType(const string & shellTypeKey)
{
	setShellType(xmlShellTypesDataBaseInterface::getShellType(shellTypeKey));
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for the shell type key.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void shellType::setShellTypeKey(const string & shellTypeKey)
{
	ShellTypeKey = shellTypeKey;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for the shell type name.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void shellType::setShellTypeName(const string & shellTypeName)
{
	ShellTypeName = shellTypeName;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method WRITE.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void shellType::writeHuman(ostream & out , const string & linePrefix) const
{
	out << linePrefix << "- Key                    : \"" << getShellTypeKey() << "\"" << endl;
	out << linePrefix << "- Name                   : \"" << getShellTypeName() << "\"" << endl;
	out << linePrefix << "- Nbr Of Basis Functions : " << getNbrOfBasisFunctions() << endl;
	out << linePrefix << "- Polynomes              : { " << ends ; 
	
	for (int i=0 ; i < getNbrOfBasisFunctions() ; i++) {
		
		out << monome3D2string(getMonomeDegree(i)) << ends;
		
		if( (i+1) < getNbrOfBasisFunctions() ) {
			out << " , " << ends;
		} 
	}

	out << " }" << endl;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Extern operator for the write.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ostream & operator<<(ostream & out , const shellType & shell)
{
	shell.writeHuman(out);
	return out;
}

