/* 
* The chemics library of A.S.P.I.C. 
 * Written and directed by François Lodier support.aspic@gmail.com.
 *
 * Copyright (C) 2005  François Lodier
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */
#include "atom.h"
#include <assert.h>

const double atom::AtomicUnit2Angstroem = 0.529177210818;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Constructeur par défaut.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
atom::atom(void)
: chemicalElement() , DistanceUnit(ATOMIC_UNIT) ,  NbrOfNeutrons(0) , Position(0,0,0) 
{
 ;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copy constructor.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
atom::atom(const atom & a)
 : chemicalElement() , DistanceUnit(ATOMIC_UNIT) , NbrOfNeutrons(0) , Position(0,0,0)
{
 copy(a);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Destructor.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
atom::~atom(void) 
{
	clear();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Convertisseur Angström -> Atomic Unit.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
double atom::angstroem2AtomicUnitConverter(const double & angstroem)
{
	return angstroem/AtomicUnit2Angstroem; 
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Convertisseur Angström -> Atomic Unit.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
dpoint<3> atom::angstroem2AtomicUnitConverter(const dpoint<3> & angstroem)
{
	dpoint<3> atomicUnit;
	
	for(int i=0 ; i < 3 ; i++) {
		atomicUnit[i] = angstroem2AtomicUnitConverter(angstroem[i]);
	}

	return atomicUnit;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Convertisseur Atomic Unit -> Angström.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
double atom::atomicUnit2AngstroemConverter(const double & atomicUnit)
{
	return atomicUnit * AtomicUnit2Angstroem;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Convertisseur Angström -> Atomic Unit.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
dpoint<3> atom::atomicUnit2AngstroemConverter(const dpoint<3> & atomicUnit)
{
	dpoint<3> angstroem;
	
	for(int i=0 ; i < 3 ; i++) {
		angstroem[i] = angstroem2AtomicUnitConverter(atomicUnit[i]);
	}

	return angstroem;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for the position unit.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void atom::changeDistanceUnit(const distanceUnit & unit) const
{
	if(getDistanceUnit() == unit) {
		return;
	}

	if(getDistanceUnit() == ANGSTROEM && unit == ATOMIC_UNIT) {
		((atom &)*this).setPosition(atomicUnit2AngstroemConverter(getPosition()));
		((atom &)*this).setDistanceUnit(ATOMIC_UNIT);
	}
	
	if(getDistanceUnit() == ATOMIC_UNIT && unit == ANGSTROEM) {
		((atom &)*this).setPosition(angstroem2AtomicUnitConverter(getPosition()));
		((atom &)*this).setDistanceUnit(ANGSTROEM);
	}
	
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Clear method.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void atom::clear(void)
{
	chemicalElement::clear();
	NbrOfNeutrons = 0;
	Position.setDatas(0);
	setDistanceUnit(ATOMIC_UNIT);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copy method.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void atom::copy(const atom & a)
{
	chemicalElement::copy(a);
	setNbrOfNeutrons(a.getNbrOfNeutrons());
	setPosition(a.getPosition());
	setDistanceUnit(a.getDistanceUnit());
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Convertion de distance en chaine de charactères.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
string atom::distanceUnit2String(const atom::distanceUnit & unit)
{
	if(unit == atom::ANGSTROEM) {
		return "A";
	} else {
		return "au";
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET for the position unit.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const atom::distanceUnit & atom::getDistanceUnit(void) const
{
	return DistanceUnit;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET for the number of neutrons.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const int & atom::getNbrOfNeutrons(void) const
{
	return NbrOfNeutrons;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET for the position.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const dpoint<3> & atom::getPosition(void) const
{
	return Position;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET for the position.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const dpoint<3> atom::getPosition(const atom::distanceUnit & unit) const
{
	dpoint<3> position = getPosition();
	
	
	atom::distanceUnit oldUnit = getDistanceUnit();
	
	if(unit == ATOMIC_UNIT) {
		
		if(oldUnit == ANGSTROEM) {
			return angstroem2AtomicUnitConverter(position);
		}
		
		if(oldUnit == ATOMIC_UNIT) {
			return position;
		}
		
		assert(0);
	}
	
	
	if(unit == ANGSTROEM) {
		
		if(oldUnit == ANGSTROEM) {
			return position;
		}
		
		if(oldUnit == ATOMIC_UNIT) {
			return atomicUnit2AngstroemConverter(position);
		}
		
		assert(0);
	}
	
	assert(0);
	return position;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Operator = for the atom.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
atom & atom::operator=(const atom & a)
{
	copy(a);
	return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for the number of neutrons.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void atom::setAtom(const atom & a)
{
	copy(a);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for the position unit.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void atom::setDistanceUnit(const distanceUnit & unit)
{
	DistanceUnit = unit;	
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for the number of neutrons.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void atom::setNbrOfNeutrons(const int & nbrOfNeutrons)
{
	assert(nbrOfNeutrons >= 0);
	NbrOfNeutrons = nbrOfNeutrons;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for the position.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void atom::setPosition(const dpoint<3> & position , const distanceUnit & unit)
{
	Position = position;
	setDistanceUnit(unit);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for the position.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void atom::setPosition(const double & x ,const  double & y ,const double & z , const distanceUnit & unit)
{
	Position.setDatas(x,y,z);
	setDistanceUnit(unit);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Convertion de distance en chaine de charactères.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 atom::distanceUnit atom::string2DistanceUnit(const string & unitString)
{
	if(unitString == "A" || unitString == "angstroem" || unitString == "Angstroem" || unitString == "angstrom" || unitString == "Angstrom") {
		return atom::ANGSTROEM;
	} 

	if(unitString == "au" || unitString == "AtomicUnit" || unitString == "atomicUnit" || unitString == "Atomic_Unit" || unitString == "atomic_unit") {
		return atom::ATOMIC_UNIT;
	} 

	assert(0);
	return atom::ATOMIC_UNIT;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method Write.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void atom::write(ostream & out , const string & prefixLine) const
{
	chemicalElement::write(out,prefixLine);
	out << prefixLine << " - NbrOfNeutrons : " << getNbrOfNeutrons()  << endl;
	out << prefixLine << " - Position          : " << getPosition() << " ( " <<  getDistanceUnit() << " )." << endl;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method Write.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void atom::writeXML(ostream & outStream , const string & linePrefix) const
{
	outStream << linePrefix << "<Atom>" << endl;
	outStream << linePrefix << "\t<ChemicalElement>" << endl;
	outStream << linePrefix << "\t\t<ChemicalElementKey>" << getChemicalElementKey() << "</ChemicalElementKey>" << endl;
	if(getNbrOfNeutrons() != getIsotope(0).first)
		outStream << linePrefix << "\t\t<NbrOfNeutrons>" << getNbrOfNeutrons() << "</NbrOfNeutrons>" << endl;
	outStream << linePrefix << "\t</ChemicalElement>" << endl;
	outStream << linePrefix << "\t<AtomCenter>" << endl;
	outStream << linePrefix << "\t\t<Position>" << endl;
	outStream << linePrefix << "\t\t\t<x>" << scientific << getPosition()[0] << "</x>" << endl;
	outStream << linePrefix << "\t\t\t<y>" << scientific << getPosition()[1] << "</y>" << endl;
	outStream << linePrefix << "\t\t\t<z>" << scientific << getPosition()[2] << "</z>" << endl;
	outStream << linePrefix << "\t\t</Position>" << endl;
	outStream << linePrefix << "\t\t<DistanceUnit>" << getDistanceUnit() << "</DistanceUnit>" << endl;
	outStream << linePrefix << "\t</AtomCenter>" << endl;
	outStream << linePrefix << "</Atom>" << endl;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Operator <<.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ostream & operator<<(ostream & out , const atom & a)
{
	a.write(out);
	return out;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Operator <<.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ostream & operator<<(ostream & out , const atom::distanceUnit & unit)
{
	out << atom::distanceUnit2String(unit);
	return out;
}
