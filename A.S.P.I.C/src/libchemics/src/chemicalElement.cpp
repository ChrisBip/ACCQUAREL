/* 
* The chemics library of A.S.P.I.C. 
 * Written and directed by François Lodier francois.lodier@gmail.com.
 *
 * Copyright (C) 2005  François Lodier
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */
#include "chemicalElement.h"
#include "chemicalElementsDataBaseInterface.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Default constructor.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chemicalElement::chemicalElement(void)
:  Isotopes() , Key("") , Name("") , NbrOfProtons(0) , Symbol("")
{
	;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copy constructor.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chemicalElement::chemicalElement(const chemicalElement & element)
:  Isotopes() , Key("") , Name("") , NbrOfProtons(0) , Symbol("")
{
	copy(element);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Destructor.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chemicalElement::~chemicalElement(void)
{
	clear();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CLEAR Method.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chemicalElement::clear(void)
{
	Isotopes.clear();
	Key ="";
	Name = "";
	NbrOfProtons =0;
	Symbol="";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// COPY Method
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chemicalElement::copy(const chemicalElement & element)
{

	/////////////////////////////////////////////////////////////////////////
	// Lorsque l'élément chimique à copier est vide on clear et
	// puis c'est tout.
	if(element.empty()) {
		clear();
		return;
	}
	
	///////////////////////////////////////////////////////////////////////////
	// Sinon on copie tout...
	// - La clé.
	// - Les isotopes.
	// - Le nom
	// - Le nombre de protons.
	// - Le symbole.
	setChemicalElementKey(element.getChemicalElementKey());
	setIsotopes(element.getIsotopes());
	setName(element.getName());
	setNbrOfProtons(element.getNbrOfProtons());
	setSymbol(element.getSymbol());
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// COPY Method
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool chemicalElement::empty(void) const
{
	return Isotopes.empty();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET for the name of the chemical element.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const string & chemicalElement::getChemicalElementKey(void) const
{
	return Key;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Méthode get pour un isotope
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const pair<int,double> & chemicalElement::getIsotope(const int & item) const
{
	assert(item >=0 );
	assert(item < getNbrOfIsotopes() );

	return Isotopes[item];
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Méthode get pour le nombre d'isotpes.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const containor<pair<int , double> > & chemicalElement::getIsotopes(void) const
{
	return Isotopes;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET for the name of the chemical element.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const string & chemicalElement::getName(void) const
{
	return Name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Méthode get pour le nombre d'isotpes.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const int & chemicalElement::getNbrOfIsotopes(void) const
{
	return Isotopes.getSizes();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Méthode get pour la probabilité d'exisante d'un isotope.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const int & chemicalElement::getNbrOfNeutrons4Isotope(const int & item) const
{
	assert(item >=0 );
	assert(item < getNbrOfIsotopes() );

	return getIsotope(item).first;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET for the number of Protons.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const int & chemicalElement::getNbrOfProtons(void) const
{
	return NbrOfProtons;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Méthode get pour la probabilité d'exisante d'un isotope.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const double & chemicalElement::getProbability4Isotope(const int & item) const
{
	assert(item >=0 );
	assert(item < getNbrOfIsotopes() );

	return getIsotope(item).second;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET for the symbl of the chemical element.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const string & chemicalElement::getSymbol(void) const
{
	return Symbol;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Operator =.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
chemicalElement & chemicalElement::operator=(const chemicalElement & element)
{
	copy(element);
	return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for the chemical element.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chemicalElement::setChemicalElement(const chemicalElement & element)
{
	copy(element);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for the chemical element.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chemicalElement::setChemicalElement(const string & chemicalElementKey)
{
	setChemicalElement(xmlChemicalElementsDataBaseInterface::getChemicalElement(chemicalElementKey));
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for the chemical element.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chemicalElement::setChemicalElementKey(const string & chemicalElementKey)
{
	Key = chemicalElementKey;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for all the isotopes.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chemicalElement::setIsotopes(const containor<pair<int,double> > & isotopes)
{
	assert(isotopes.empty() == false);
	Isotopes.setSizes(isotopes.getSizes());
	
	for(int i=0 ; i < isotopes.getSizes() ; i++) {
		pair<int,double> isotope = isotopes.getData(i);
		assert(isotope.first >= 0);
		assert(isotope.second >= 0);
		assert(isotope.second <= 100);
		Isotopes.setData(i,isotope);
	}

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for an isotopes.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chemicalElement::setIsotope(const int & item , const pair<int,double> & isotope)
{
	assert(item >= 0);
	assert(item < getNbrOfIsotopes());
	assert(isotope.first >= 0);
	assert(isotope.second >= 0);
	assert(isotope.second <= 100);

	Isotopes.setData(item,isotope);

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for an isotopes.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chemicalElement::setIsotope(const int & item , const int & nbrOfNeutrons ,const double & probability)
{
	assert(item >= 0);
	assert(item < getNbrOfIsotopes());

	assert(nbrOfNeutrons >= 0);
	assert(probability >= 0);
	assert(probability <= 100);

	Isotopes.setData(item,pair<int,double>(nbrOfNeutrons,probability));
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for the name of the chemical element.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chemicalElement::setName(const string & name) 
{
	Name = name;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for the number of isotopes.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chemicalElement::setNbrOfIsotopes(const int & nbrOfIsotopes)
{
	assert(nbrOfIsotopes>0);

	if(getNbrOfIsotopes() == nbrOfIsotopes)
		return;

	Isotopes.setSizes(nbrOfIsotopes);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for the number of protons.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chemicalElement::setNbrOfProtons(const int & nbrOfProtons)
{
	assert(nbrOfProtons >=0);
	
	if(nbrOfProtons == 0) {
		cerr << "Warning : in void chemicalElement::setNbrOfProtons(const int & nbrOfProtons)" << endl;
		cerr << "Warning : setting number of protons to 0." << endl;
		cerr << "Warning : make sure this is what you want." << endl;
	}
	
	NbrOfProtons = nbrOfProtons;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for the symbol
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chemicalElement::setSymbol(const string & symbol) 
{
	Symbol= symbol;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method write.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void chemicalElement::write(ostream & out , const string & prefixLine) const
{
	out << prefixLine << " - Element Key       : \"" << getChemicalElementKey() << "\"." << endl;
	out << prefixLine << " - Symbol            : \"" << getSymbol() << "\"." << endl;
	out << prefixLine << " - Name              : " << getName() << endl;
	out << prefixLine << " - Number of protons : " << getNbrOfProtons() << endl;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Operator << 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ostream & operator<<(ostream & out , const chemicalElement & element)
{
	element.write(out);
	return out;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Operator << 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ostream & operator<<(ostream & outStream , const pair<int,double> value)
{
	outStream << "( " << value.first << " , " << value.second << " )";
	return outStream;
}
