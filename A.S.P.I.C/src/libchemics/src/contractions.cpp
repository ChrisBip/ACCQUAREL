/* 
* The chemics library of A.S.P.I.C. 
 * Written and directed by François Lodier francois.lodier@gmail.com.
 *
 * Copyright (C) 2005  François Lodier
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */
#include "contractions.h"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Default constructor.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
contractions::contractions(void) 
	: Coefficients() , Exponents()
{
	;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copy constructor.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
contractions::contractions(const contractions & c)
: Coefficients() , Exponents()
{
	copy(c);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Destructor.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
contractions::~contractions(void) 
{
	clear();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method CLEAR.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void contractions::clear(void)
{
	Coefficients.clear();
	Exponents.clear();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method COPY.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void contractions::copy(const contractions & c)
{
	if(c.empty()) {
		clear();
	} else {
		setNbrOfContractions(c.getNbrOfContractions());
		setCoefficients(c.getCoefficients());
		setExponents(c.getExponents());
	}
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method EMPTY.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool contractions::empty(void) const
{
	if(getNbrOfContractions() == 0) {
		return true;
	} else {
		return false;
	}
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Methode GET pour les coefficients.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const containor<double> & contractions::getCoefficients(void) const
{
	return Coefficients;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Methode GET for a coefficient.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const double & contractions::getCoefficient(const int & item) const
{
	assert(item >= 0);
	assert(item < getNbrOfContractions());
	
	return Coefficients[item];
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET for all exponents.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const containor<double> & contractions::getExponents(void) const
{
	return Exponents;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET for an exponent.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const double & contractions::getExponent(const int & item) const
{
	assert(item >= 0);
	assert(item < getNbrOfContractions());

	return Exponents[item];
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET for the number of contractions.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int contractions::getNbrOfContractions(void) const
{
	return Coefficients.getSizes();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Operator =
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
contractions & contractions::operator=(const contractions & c)
{
	copy(c);
	return *this;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for an array of coefficients.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void contractions::setCoefficients(const containor<double> & coefficients) 
{
	assert(getNbrOfContractions() == coefficients.getSizes());	
	Coefficients = coefficients;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for a coefficient.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void contractions::setCoefficient(const int & item , const double & coefficient) 
{
	assert(item >= 0);
	assert(item < getNbrOfContractions());
	
	Coefficients[item] = coefficient;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for a contractions set.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void contractions::setContractions(const contractions & c)
{
	copy(c);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for an array of exponents.
//
// @warning this method does not performs memory allocation : the size of the argument coefficient must be the storage size
// ie the size must be exactly the getNbrOfContractions() value.
//
// @warning the data pass in arguments shall become gaussian exponents. So we must ensure that those values are 
// strictly positive.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void contractions::setExponents(const containor<double> & exponents) 
{
	assert(getNbrOfContractions() == exponents.getSizes());
	
	for(int item=0 ; item < exponents.getSizes() ; item++) {
		assert(exponents[item] > 0);
		Exponents[item] = exponents[item];
	}
	
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for an exponent.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void contractions::setExponent(const int & item , const double & exponent) 
{
	assert(item >= 0);
	assert(item < getNbrOfContractions());
	assert(exponent > 0);

	Exponents[item] = exponent;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for the number of contractions.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void contractions::setNbrOfContractions(const int & nbrOfContractions)
{
	assert(nbrOfContractions > 0);

	if(nbrOfContractions == getNbrOfContractions()) {
		return;
	}

	Coefficients.setSizes(nbrOfContractions);
	Exponents.setSizes(nbrOfContractions);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method that prints a contractions.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void contractions::write(ostream & out) const
{
	out << "NbrOfContractions : " << getNbrOfContractions() << endl;
	
	for(int i=0 ; i < getNbrOfContractions() ; i++) {
		out << " Contraction  : " << i << endl;
		out << " exponent     : " << getExponent(i) << endl;
		out << " coefficient  : " << getCoefficient(i) << endl;
	
	}

}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// External operator <<.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ostream & operator<<(ostream & outStream , const contractions & c) 
{
	c.write(outStream);
	return outStream;
}

