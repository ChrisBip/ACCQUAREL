/* 
 * The chemics library of A.S.P.I.C. 
 * Written and directed by François Lodier francois.lodier@gmail.com.
 *
 * Copyright (C) 2005  François Lodier
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */
#include <aspicConfiguration.h>
#include <xmlIPoint3Parser.h>
#include "xmlShellTypesDataBaseInterface.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Le nom du tag qui contient les différents élément de la base de données.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const string xmlShellTypesDataBaseInterface::ShellTypeTagName = "ShellType";

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Le nom de l'attribut qui contient la clé du type de douche.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const string xmlShellTypesDataBaseInterface::ShellTypeKeyAttributeName = "ShellTypeKey";

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// L'objet base de donnée à instancier.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
xmlShellTypesDataBaseInterface * xmlShellTypesDataBaseInterface::ShellTypesDataBase = NULL;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The constructor.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
xmlShellTypesDataBaseInterface::xmlShellTypesDataBaseInterface(void)
	: xmlDataBaseInterface(ShellTypeTagName,ShellTypeKeyAttributeName)
{
	;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The destructor.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
xmlShellTypesDataBaseInterface::~xmlShellTypesDataBaseInterface(void)
{
	;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Static Method to connect.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void xmlShellTypesDataBaseInterface::connect(void)
{
	if(ShellTypesDataBase != NULL) {
		return;
	}

	ShellTypesDataBase = new xmlShellTypesDataBaseInterface;
	ShellTypesDataBase->load(ShellTypesDataBase->getDocumentURI());
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Static Method to know of we are connected or not.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool xmlShellTypesDataBaseInterface::connected(void)
{
	if(ShellTypesDataBase != NULL) {
		return true;
	}

	return false;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Static Method to disconnect.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void xmlShellTypesDataBaseInterface::disconnect(void)
{
	if(ShellTypesDataBase == NULL) {
		return;
	}

	delete ShellTypesDataBase;
	ShellTypesDataBase=NULL;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET for the document location containing the description of the shells.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
string xmlShellTypesDataBaseInterface::getDocumentURI(void) const
{
	return aspicConfiguration::getShellTypesDataBasePath();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Static Method GET for the number of shells in the data base.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int  xmlShellTypesDataBaseInterface::getNbrOfShellTypes(void) 
{
	if(connected() == false) {
		connect();
	}

	return ShellTypesDataBase->getNbrOfEntries();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Static Method GET for a shell type.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
shellType xmlShellTypesDataBaseInterface::getShellType(const string & shellTypeKey)
{
	shellType shell;
	DOMElement * rootElement;
	xmlShellTypeParser shellTypeParser;

	//////////////////////////////////////////////////////////////////////////////
	// Lorsque l'on est pas connecté à la base de donnée, on se connecte.
	//
	// Question que ce passe - t - il si la connection est refusée ? : En fait on 
	// essaie de se connecter une première fois, et si cela ne fonctionne pas
	// on arrete le programme.
	////////////////////////////////////////////////////////////////////////////////
	if(connected() == false) {
		connect();
	
		if(connected() == false){
			cerr << "Error : in shellType xmlShellTypesDataBaseInterface::getShellType(const string & shellTypeKey)" << endl;
			cerr << "Error : no connection to data base available" << endl;
			cerr << "Error : aborting" << endl;
			exit(1);
		}
	} 

	//////////////////////////////////////////////////////////////////////////////////
	// On récupére le noeud du document XML qui correspond à ce que l'on cherche.
	//
	// Si on ne le trouve pas on arrete le programme.
	/////////////////////////////////////////////////////////////////////////////////
	rootElement = ShellTypesDataBase->getElementById(shellTypeKey);

	if(rootElement == NULL) {
		cerr << "Error : in xmlShellTypesDataBaseInterface::getShellType(const string & shellTypeKey)" << endl;
		cerr << "Error : no shell type with key \"" << shellTypeKey << "\"defined in the data base." << endl;
		cerr << "Error : returning empty shell type." << endl;
		shell.clear();
		return shell;
	}


	/////////////////////////////////////////////////////////////////////////
	// On laisse le parser de type de shell faire.
	//
	// Il faut vérifier pour cette histoire de clé ... j'avoue que cela
	// serait plutot le role du parser de shell type a mon avis.
	/////////////////////////////////////////////////////////////////////////
	shell = shellTypeParser.getShellType(rootElement);
	
	/////////////////////////////////////////////////////////////////////////////
	// On renvoie la valeur trouvée.
	/////////////////////////////////////////////////////////////////////////////
	return shell;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Static Method GET for a shell type.
//
// Cette méthode permet de retouver le type de couche qui 
// est l'entré item de la base de données.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
shellType xmlShellTypesDataBaseInterface::getShellType(const int & item)
{
	
	shellType shell;
	DOMElement * rootElement;
	xmlShellTypeParser shellTypeParser;

	//////////////////////////////////////////////////////////////////////////////
	// Lorsque l'on est pas connecté à la base de donnée, on se connecte.
	//
	// Question que ce passe - t - il si la connection est refusée ? : En fait on 
	// essaie de se connecter une première fois, et si cela ne fonctionne pas
	// on arrete le programme.
	////////////////////////////////////////////////////////////////////////////////
	if(connected() == false) {
		connect();
	
		if(connected() == false){
			cerr << "Error : in shellType xmlShellTypesDataBaseInterface::getShellType(const int & item)" << endl;
			cerr << "Error : no connection to data base available" << endl;
			cerr << "Error : aborting" << endl;
			exit(1);
		}
	}

	/////////////////////////////////////////////////////////////////////////////////
	// Ici, dans le cadre de degbuggage on vérifie que l'argument est
	// pas trop mal sain.
	//////////////////////////////////////////////////////////////////////////////////
	assert(item >= 0);
	assert(item < getNbrOfShellTypes());


	//////////////////////////////////////////////////////////////////////////////////
	// On récupére le noeud du document XML qui correspond à ce que l'on cherche.
	//
	// Si on ne le trouve pas on arrete le programme.
	/////////////////////////////////////////////////////////////////////////////////
	rootElement = (DOMElement *) ShellTypesDataBase->getDataBaseEntry(item);
	
	if(rootElement == NULL) {
		cerr << "Error : in shellType xmlShellTypesDataBaseInterface::getShellType(int item)" << endl;
		cerr << "Error : item " << item << " not found in the data base."<< endl;
		cerr << "Error : aborting." << endl;
		exit(1);
	}

	/////////////////////////////////////////////////////////////////////////
	// On laisse le parser de type de shell faire.
	//
	// Il faut vérifier pour cette histoire de clé ... j'avoue que cela
	// serait plutot le role du parser de shell type a mon avis.
	/////////////////////////////////////////////////////////////////////////
	shell = shellTypeParser.getShellType(rootElement);
	
	/////////////////////////////////////////////////////////////////////////////
	// On renvoie la valeur trouvée.
	/////////////////////////////////////////////////////////////////////////////
	return shell;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET for the ID attribute name.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const string & xmlShellTypesDataBaseInterface::getShellTypeKeyAttibuteName(void) 
{
	return ShellTypeKeyAttributeName;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET for the entry TAG name.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const string & xmlShellTypesDataBaseInterface::getShellTypeTagName(void) 
{
	return ShellTypeTagName;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET to find the schema.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
string xmlShellTypesDataBaseInterface::getSchemaURI(void) const
{
	return aspicConfiguration::getShellTypesDataBaseSchemaPath();
}
