/* 
* The chemics library of A.S.P.I.C. 
 * Written and directed by François Lodier francois.lodier@gmail.com.
 *
 * Copyright (C) 2005  François Lodier
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */
#include "basisElement.h"
#include "xmlBasisDataBaseInterface.h"

///////////////////////////////////////////////////////////////////////////////////////////////////////////
// The constructor.
// creates an empty basisElement object.
///////////////////////////////////////////////////////////////////////////////////////////////////////////
basisElement::basisElement(void)
{
	clear();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The Destructor.
////////////////////////////////////////////////////////////////////////////////////////////////////////////
basisElement::~basisElement(void)
{
	clear();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method that clears the object.
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void basisElement::clear(void)
{
	BasisName = "";
	BasisElementKey = "";
	Contractions4Shells.clear();
	ShellTypes.clear();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method that copy a gaussian basis element.
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void basisElement::copy(const basisElement & element)
{
	
	if(element.empty() == true) {
		clear();
		return;
	}
	
	setBasisName(element.getBasisName());
	setBasisElementKey(element.getBasisElementKey());
	setNbrOfShells(element.getNbrOfShells());
	setContractions4Shells(element.getContractions4Shells());
	setShellTypes(element.getShellTypes());
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method EMPTY.
////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool basisElement::empty(void) const
{
	if(getNbrOfShells() == 0) {
		return true;
	} else {
		return false;
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET for the basis name.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const string & basisElement::getBasisName(void) const
{
	return BasisName;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET for the element key.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const string & basisElement::getBasisElementKey(void) const
{
	return BasisElementKey;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET for the contractions of a given shell.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int basisElement::getNbrOfContractions4Shell(int item) const
{
	assert( item >= 0);
	assert(item < getNbrOfShells());
	return getContractions4Shell(item).getNbrOfContractions();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET for the contractions of a given shell.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const contractions & basisElement::getContractions4Shell(int item) const
{
	assert( item >= 0);
	assert(item < getNbrOfShells());
	return Contractions4Shells[item];
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET for the contractions of all shells.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const containor<contractions> & basisElement::getContractions4Shells(void) const
{
	return Contractions4Shells;	
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Method GET to find a monome degree.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const ipoint<3> & basisElement::getMonomeDegree(int shell , int function) const
{
	assert(shell >= 0);
	assert(shell < getNbrOfShells());

	assert(function >= 0);
	assert(function < getNbrOfBasisFunctions4Shell(shell));

	return getShellType(shell).getMonomeDegree(function);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET for the number of basis functions of a shell.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int basisElement::getNbrOfBasisFunctions4Shell(int item) const
{
	assert(item >= 0);
	assert(item < getNbrOfShells());

	return getShellType(item).getNbrOfBasisFunctions();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET for the number of shells.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int basisElement::getNbrOfShells(void) const
{
	return Contractions4Shells.getSizes();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET for the shell type.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const shellType & basisElement::getShellType(int item) const
{
	assert(item >=0 );
	assert(item < getNbrOfShells());
	
	return ShellTypes[item];
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET for the shell type key of a given shell.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const string & basisElement::getShellTypeKey(int item) const
{
	assert(item >=0 );
	assert(item < getNbrOfShells());
	
	return getShellType(item).getShellTypeKey();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET for the shell type key of a given shell.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const containor<shellType> & basisElement::getShellTypes(void) const
{	
	return ShellTypes;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Operator =.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
basisElement & basisElement::operator=(const basisElement & basisElement)
{
	copy(basisElement);
	return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for the name of the basis in whoch the element is expressed.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void basisElement::setBasisName(const string & basisName)
{
	BasisName = basisName;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for the name of the basis in whoch the element is expressed.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void basisElement::setBasisElementKey(const string & basisElementKey)
{
	BasisElementKey = basisElementKey;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for the contractions of a given shell.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void basisElement::setContractions4Shell(int item , const contractions & shellContractions) 
{
	assert(item >=0);
	assert(item < getNbrOfShells());

	Contractions4Shells[item] = shellContractions;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for the contractions of all shells.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void basisElement::setContractions4Shells(const containor<contractions> & contractions4Shells) 
{
	assert(getNbrOfShells() == contractions4Shells.getSizes());
	Contractions4Shells = contractions4Shells;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for the contractions of all shells.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void basisElement::setBasisElement(const basisElement & basisElement)
{
	copy(basisElement);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for the contractions of all shells.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void basisElement::setGaussianBasisElement(const string & basisName , const string & basisElementKey)
{
	setBasisElement(xmlBasisDataBaseInterface::getBasisElement(basisName , basisElementKey));
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for the number of shells.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void basisElement::setNbrOfShells(int nbrOfShells)
{
	assert(nbrOfShells > 0);
	Contractions4Shells.setSizes(nbrOfShells);
	ShellTypes.setSizes(nbrOfShells);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for a shell type key.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void basisElement::setShellType(int item , const string & shellTypeKey) 
{
	assert(item >= 0);
	assert(item < getNbrOfShells());
	
	ShellTypes[item].setShellType(shellTypeKey);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for all the shell type keys.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void basisElement::setShellTypes(const containor<shellType> & shellTypes) 
{
	assert(getNbrOfShells() == shellTypes.getSizes());
	ShellTypes = shellTypes;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method WRITE.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void basisElement::write(ostream & out) const
{
	out << "@TODO@";
	/** TODO **/
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Extern Operator << 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ostream & operator<<(ostream & out , const basisElement & basisElement)
{
	basisElement.write(out);
	return out;
}

