/* 
* The chemics library of A.S.P.I.C. 
 * Written and directed by François Lodier francois.lodier@gmail.com.
 *
 * Copyright (C) 2005  François Lodier
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */
#include "gaussianBasisFunction.h"

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Default costructor.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
gaussianBasisFunction::gaussianBasisFunction(void)
	: contractions() , Center(0) , MonomeDegree(0)
{
	;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copy constructor.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
gaussianBasisFunction::gaussianBasisFunction(const gaussianBasisFunction & gbf)
{
	copy(gbf);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Destructor.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
gaussianBasisFunction::~gaussianBasisFunction(void)
{
	clear();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method CLEAR.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void gaussianBasisFunction::clear()
{
	contractions::clear();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method COPY.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void gaussianBasisFunction::copy(const gaussianBasisFunction & gbf)
{
	contractions::copy(gbf);
	setCenter(gbf.getCenter());
	setMonomeDegree(gbf.getMonomeDegree());	
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method EVAL
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
double gaussianBasisFunction::eval(const dpoint<3> & x) const
{
	int nbrOfContractions , i;
	double value =0;
	
	nbrOfContractions = getNbrOfContractions();
	for(i=0 ; i < nbrOfContractions ; i++) {
		value += getGaussianPolynome3D(i).eval(x);
	}

	return value;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET for the center.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const dpoint<3> & gaussianBasisFunction::getCenter(void) const
{
	return Center;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET to convert a component of the gaussian basis function onto a gaussian polynome.
//
// @param item the number of the contraction to convert.
//
// @warning the param item must be in the range of contractions size.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
gaussianPolynome3D gaussianBasisFunction::getGaussianPolynome3D(const int & item) const
{
	assert(item >= 0);
	assert(item < getNbrOfContractions());

	gaussianPolynome3D gp;

	gp.clearPolynome();
	gp.setCenter(getCenter());
	gp.setPolynomeCoefficient(getMonomeDegree(),1);
	gp.setCoefficient(getCoefficient(item));
	gp.setExponent(getExponent(item));

	return gp;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method GET for the monome degree of the basis function.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const ipoint<3> & gaussianBasisFunction::getMonomeDegree(void) const
{
	return MonomeDegree;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for the center of the basis function.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void gaussianBasisFunction::setCenter(const dpoint<3> & center)
{
	Center = center;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for the center of the basis function.
//
// @warning all the components of the monome degree must be non negative integers.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void gaussianBasisFunction::setMonomeDegree(const ipoint<3> & monomeDegree)
{
	assert(monomeDegree[0] >= 0);
	assert(monomeDegree[1] >= 0);
	assert(monomeDegree[2] >= 0);

	MonomeDegree = monomeDegree;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method SET for the center of the basis function.
//
// @warning all the components of the monome degree must be non negative integers.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void gaussianBasisFunction::setMonomeDegree(int degree_x , int degree_y , int degree_z)
{
	assert(degree_x >= 0);
	assert(degree_y >= 0);
	assert(degree_z >= 0);

	MonomeDegree.setDatas(degree_x,degree_y,degree_z);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Method Write.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void gaussianBasisFunction::write(ostream & out) const
{
	out << "Center      : " << getCenter() << endl;
	out << "MonomeDegree : " << getMonomeDegree() << endl;
	contractions::write(out);
}


