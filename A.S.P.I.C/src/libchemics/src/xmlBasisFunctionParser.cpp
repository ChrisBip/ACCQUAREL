/* 
 * The chemics library of A.S.P.I.C. 
 * Written and directed by François Lodier francois.lodier@gmail.com.
 *
 * Copyright (C) 2005  François Lodier
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */
#include "xmlBasisFunctionParser.h"
#include "xmlContractionsParser.h"
#include <xmlDPoint3Parser.h>
#include <xmlIPoint3Parser.h>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Constructor.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
xmlBasisFunctionParser::xmlBasisFunctionParser(void)
: xmlParser()
{
	;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Constructor.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
xmlBasisFunctionParser::xmlBasisFunctionParser(DOMElement * rootElement)
: xmlParser(rootElement)
{
	;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Destructor.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
xmlBasisFunctionParser::~xmlBasisFunctionParser(void)
{
	;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Méthode GET pour une fonction de base gaussienne dans une partie de document XML
//
// 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
gaussianBasisFunction xmlBasisFunctionParser::getBasisFunction(const DOMElement * rootElement) const
{
	gaussianBasisFunction basisFunction;
	DOMElement * basisFunctionElement;
	DOMElement * centerElement;
	xmlDPoint3Parser positionParser;
	xmlContractionsParser contractionsParser;
	xmlIPoint3Parser monomeDegreeParser;

	////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Etape 1 : On cherhce le tag racine de la fonction de base.
	// Soit on le trouve, alors on fait le travaille, soit on le trouve
	// pas, alors on arrete le programme.
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	basisFunctionElement = (DOMElement *)getElementByTagName(rootElement,getBasisFunctionTagName());

	if(basisFunctionElement == NULL) {
		cerr << "Error : gaussianBasisFunction xmlBasisFunctionParser::getBasisFunction(const DOMElement * rootElement)" << endl;
		cerr << "Error : the root element does not contain any basis function." << endl;
		cerr << "Error : aborting." << endl;
		exit(1);
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////
	// Etape 2 : Récupération du centre
	///////////////////////////////////////////////////////////////////////////////////////////////////////
	centerElement =  (DOMElement *)getElementByTagName(basisFunctionElement , getCenterTagName());

	if(centerElement == NULL) {
		cerr << "Error : gaussianBasisFunction xmlBasisFunctionParser::getBasisFunction(const DOMElement * rootElement)" << endl;
		cerr << "Error : no center element found for basis function." << endl;
		cerr << "Error : aborting." << endl;
		exit(1);
	}

	basisFunction.setCenter(positionParser.getDPoint3(centerElement));

	///////////////////////////////////////////////////////////////////////////////////////////////////////
	// Etape 2 : Récupération des contractions
	///////////////////////////////////////////////////////////////////////////////////////////////////////
	basisFunction.setContractions(contractionsParser.getContractions(rootElement));

	///////////////////////////////////////////////////////////////////////////////////////////////////////
	//Etape 3 : Récupération des degrés du monomes.
	///////////////////////////////////////////////////////////////////////////////////////////////////////
	monomeDegreeParser.setIPoint3TagName(getMonomeDegreeTagName());
	basisFunction.setMonomeDegree(monomeDegreeParser.getIPoint3(rootElement));
	
	return basisFunction;
} 

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Méthode pour récupérer une fonction de base dans le document XML racine de l'objet.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
gaussianBasisFunction xmlBasisFunctionParser::getBasisFunction(void) const
{
	return getBasisFunction(getRootElement());
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Méthode pour retrouver le nom du tag qui contient le centre de la fonction de base.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const string xmlBasisFunctionParser::getCenterTagName(void) const
{
	return "Center";
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Méthode pour retrouver le nom du tag qui contient le degré de la fonction de base.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const string xmlBasisFunctionParser::getMonomeDegreeTagName(void) const
{
	return "MonomeDegree";
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Méthode pour retrouver le nom du tag qui contient la fonction de base.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const string xmlBasisFunctionParser::getBasisFunctionTagName(void) const
{
	return "BasisFunction";
}

