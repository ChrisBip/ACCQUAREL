/* 
* The polynome library of the A.S.P.I.C. 
 * Written and directed by François Lodier francois.lodier@gmail.com.
 *
 * Copyright (C) 2005  François Lodier
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */
#include "centerPolynome.h"
#include "string4Polynomes.h"


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The Default constructor.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
centerPolynome::centerPolynome(void)
: polynome() , Center(0)
{
	;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The Copy constructor.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
centerPolynome::centerPolynome(const centerPolynome & centerPoly)
: polynome() , Center(0)
{
	copy(centerPoly);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Constructeur avec les coefficients.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
centerPolynome::centerPolynome(const polynome & poly)
: polynome() , Center(0)
{
	setPolynomeCoefficients(poly);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Constructeur avec les coefficients et le centre.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
centerPolynome::centerPolynome(const polynome & poly , const double & center)
: polynome() , Center(0)
{
	setPolynomeCoefficients(poly);
	setCenter(center);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The Destructor.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
centerPolynome::~centerPolynome(void)
{
	;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Méthode qui ajoute root comme racine au polynome.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
centerPolynome centerPolynome::centerMonomeMultiply(const double & root) const
{
	centerPolynome shiftedPolynome;

	shiftedPolynome = polynome::centerMonomeMultiply(root-getCenter());
	shiftedPolynome.setCenter(getCenter());

	return shiftedPolynome;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Méthode qui ajoute root comme racine  avec un ordre degree au polynome.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
centerPolynome centerPolynome::centerMonomeMultiply(const double & root , const int & degree) const
{
	int i;
	centerPolynome shiftedPolynome(*this);

	for(i=0 ; i < degree ; i++) {
		shiftedPolynome = shiftedPolynome.centerMonomeMultiply(root);
	}

	return shiftedPolynome;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The method that changes the center of the polynome without changing the polynome.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
centerPolynome centerPolynome::changeCenter(const double & center) const
{

	if(getCenter() == center) {
		return *this;
	}

	centerPolynome newPolynome(0);
	polynome basePolynome(1);

	newPolynome.setCenter(center);
	 
	for(int i = begin() ; i!=end() ; i= next(i)) {
		int offset = i - basePolynome.getDegree();
		assert(offset >=0);
		if(offset > 0) {
			basePolynome = basePolynome.centerMonomeMultiply(getCenter()-center, offset);	
		}
		newPolynome.add(getData(i) * basePolynome);
	}

	return newPolynome;
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The Copy method.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void centerPolynome::copy(const centerPolynome & cp)
{
	polynome::copy(cp);
	setCenter(cp.getCenter());
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Méthode pour dériver.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
centerPolynome centerPolynome::derivate(void) const
{
	centerPolynome deriv;
	deriv = polynome::derivate();
	deriv.setCenter(getCenter());
	return deriv;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The GET method for the string that represents the basis for the polynomial decomposition.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const string centerPolynome::getBaseString(int degree) const
{
	return monome2string("x",getCenter(),degree);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The GET method for the center of the polynome.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const double & centerPolynome::getCenter(void) const
{
	return Center;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Méthode qui permet d'ajouter un zéro au polynome.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
centerPolynome centerPolynome::monomeMultiply(const int & degree) const
{
	assert( degree >=0);

	centerPolynome shiftedPolynome;

	shiftedPolynome = polynome::monomeMultiply(degree);
	shiftedPolynome.setCenter(getCenter());

	return shiftedPolynome;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Opérateur d'affectation.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
centerPolynome & centerPolynome::operator= (const centerPolynome & centerPoly)
{
	copy(centerPoly);
	return *this;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Opérateur d'affectation pour un polynome standart.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
centerPolynome & centerPolynome::operator= (const polynome & poly)
{
	polynome::copy(poly);
	setCenter(0);
	return *this;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Operateur pour faire l'addition de deux polynomes.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
centerPolynome centerPolynome::operator+ (const centerPolynome & p) const
{
	centerPolynome tmp , pCentered;

	if(getCenter() != p.getCenter()) {
		pCentered = p.changeCenter(getCenter());
	} else {
		pCentered = p;
	}
	
	tmp.add(*this,pCentered);
	tmp.setCenter(getCenter());

	return tmp;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Operateur pour faire l'addition unaire de deux polynomes.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
centerPolynome & centerPolynome::operator+= (const centerPolynome & p)
{
	centerPolynome pCentered;
	
	if(getCenter() != p.getCenter()) {
		pCentered = p.changeCenter(getCenter());
	} else {
		pCentered = p;
	}
	
	add(pCentered);

	return *this;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Operateur pour faire la multiplication de deux polynomes.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
centerPolynome centerPolynome::operator* (const centerPolynome & p) const
{
	centerPolynome tmp , pCentered;

	if(getCenter() != p.getCenter()) {
		pCentered = p.changeCenter(getCenter());
	} else {
		pCentered = p;
	}
	
	tmp.multiply(*this,pCentered);
	tmp.setCenter(getCenter());

	return tmp;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Operateur pour faire la multiplication unaire de deux polynomes.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
centerPolynome & centerPolynome::operator*= (const centerPolynome & p)
{
	centerPolynome pCentered;
	
	if(getCenter() != p.getCenter()) {
		pCentered = p.changeCenter(getCenter());
	} else {
		pCentered = p;
	}
	
	multiply(pCentered);

	return *this;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Operateur pour faire la multiplication d'un polynome et d'un scalaire.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
centerPolynome centerPolynome::operator* (const double & scalar) const
{
	centerPolynome tmp;
	tmp.setCenter(getCenter());
	tmp.multiply(*this,scalar);
	return tmp;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Operateur pour faire la multiplication unaire d'un polynome et d'un scalaire.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
centerPolynome & centerPolynome::operator*= (const double & scalar)
{
	multiply(scalar);
	return *this;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Operateur pour faire la multiplication d'un scalaire et d'un polynome.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
centerPolynome operator* (const double & scalar , const centerPolynome & p)
{
	return p*scalar;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Operateur pour faire la soustraction de deux polynomes.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
centerPolynome centerPolynome::operator- (const centerPolynome & p) const
{
	centerPolynome tmp , pCentered;

	if(getCenter() != p.getCenter()) {
		pCentered = p.changeCenter(getCenter());
	} else {
		pCentered = p;
	}
	
	tmp.soustract(*this,pCentered);
	tmp.setCenter(getCenter());

	return tmp;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Operateur pour faire la soustraction unaire de deux polynomes.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
centerPolynome & centerPolynome::operator-= (const centerPolynome & p)
{
	centerPolynome pCentered;
	
	if(getCenter() != p.getCenter()) {
		pCentered = p.changeCenter(getCenter());
	} else {
		pCentered = p;
	}
	
	soustract(pCentered);

	return *this;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Opérateur pour la division d'un polynome par un scalaire.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
centerPolynome centerPolynome::operator/ (const double & scalar) const
{
	assert(scalar != 0);
	centerPolynome tmp;
	tmp.setCenter(getCenter());
	tmp.divide(*this,scalar);
	return tmp;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Opérateur pour la division unaire d'un polynome par un scalaire.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
centerPolynome & centerPolynome::operator /=(const double & scalar)
{
	assert(scalar != 0);
	divide(scalar);
	return *this;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Méthode pour faire un changement de variable linéaire.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
centerPolynome centerPolynome::scale(const double & scalar) 
{
	centerPolynome scaledPolynome;

	if(scalar == 0) {
		scaledPolynome.clear();
		return scaledPolynome;
	}

	scaledPolynome = polynome::scale(scalar);
	scaledPolynome.setCenter(getCenter() / scalar);
	return scaledPolynome;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The SET method for the center of the polynome.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void centerPolynome::setCenter(const double & center)
{
	Center = center;
}
