/* 
* The polynome library of the A.S.P.I.C. 
 * Written and directed by François Lodier francois.lodier@gmail.com.
 *
 * Copyright (C) 2005  François Lodier
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */
#include "polynome.h"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Constructeur par défaut
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
polynome::polynome(void)
	: polynomeBase<double>()
{
	;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Constructeur de copie de la classe polynome.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
polynome::polynome(const polynome & poly) 
	: polynomeBase<double>()
{
	copy(poly);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Constructeur de polynome constant de valeur value.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
polynome::polynome(const double & value) 
	: polynomeBase<double>()
{
	setPolynomeCoefficients(value);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Destructeur de la classe polynome.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
polynome::~polynome(void)
{
	;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Méthode qui ajoute root comme racine au polynome.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
polynome polynome::centerMonomeMultiply(const double & root) const
{
	polynome shiftingPolynome , shiftedPolynome;

	shiftingPolynome.clear();
	shiftingPolynome.setData(0,-root);
	shiftingPolynome.setData(1,1);

	shiftedPolynome = *this;
	shiftedPolynome *= shiftingPolynome;

	return shiftedPolynome;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Méthode qui ajoute root comme racine  avec un ordre degree au polynome.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
polynome polynome::centerMonomeMultiply(const double & root , const int & degree) const
{
	int i;
	polynome shiftedPolynome(*this);

	for(i=0 ; i < degree ; i++) {
		shiftedPolynome = shiftedPolynome.centerMonomeMultiply(root);
	}

	return shiftedPolynome;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Méthode qui calcule le polynome dérivé.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
polynome polynome::derivate(void) const
{
	polynome deriv;
	int i ;

	deriv.clear();

	for(i= begin() ; i != end() ; i = next(i))  {
		if(i > 0) {
			deriv.setData(i-1 , i * getData(i));			
		}
	}

	return deriv;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Méthode pour connaitre la forme des fonctions de bases.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const string polynome::getBaseString(const int & i) const
{
	return monome2string("x" , 0 , i);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Méthode qui permet d'ajouter un zéro au polynome.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
polynome polynome::monomeMultiply(const int & degre) const
{
	assert( degre >=0);

	if(degre == 0) 
		return *this;

	polynome p;
	int i;

	p.clear();

	for(i = begin() ; i != end() ; i= next(i)) {
		p.setData(i+degre , getData(i));
	}

	return p;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Opérateur d'affectation
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
polynome & polynome::operator=(const polynome & p)
{
	copy(p);
	return *this;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Operateur pour faire l'addition de deux polynomes.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
polynome polynome::operator+ (const polynome & p) const
{
	polynome tmp;
	tmp.add(*this,p);
	return tmp;	
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Operateur pour faire l'addition unaire de deux polynomes.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
polynome & polynome::operator+= (const polynome & p)
{
	add(p);
	return *this;	
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Operateur pour faire la multiplication de deux polynomes.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
polynome polynome::operator* (const polynome & p) const
{
	polynome tmp;
	tmp.multiply(*this,p);
	return tmp;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Operateur pour faire la multiplication unaire de deux polynomes.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
polynome & polynome::operator*= (const polynome & p)
{
	multiply(p);
	return *this;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Operateur pour faire la multiplication d'un polynome et d'un scalaire.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
polynome polynome::operator* (const double & scalar) const
{
	polynome tmp;
	tmp.multiply(*this,scalar);
	return tmp;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Operateur pour faire la multiplication unaire d'un polynome et d'un scalaire.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
polynome & polynome::operator*= (const double & scalar)
{
	multiply(scalar);
	return *this;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Operateur pour faire la multiplication d'un scalaire et d'un polynome.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
polynome operator* (const double & scalar , const polynome & p)
{
	return p*scalar;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Operateur pour faire la soustraction de deux polynomes.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
polynome polynome::operator- (const polynome & p) const
{
	polynome tmp;
	tmp.soustract(*this,p);
	return tmp;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Operateur pour faire la soustraction unaire de deux polynomes.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
polynome & polynome::operator-= (const polynome & p)
{
	soustract(p);
	return *this;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Opérateur pour la division d'un polynome par un scalaire.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
polynome polynome::operator/ (const double & scalar) const
{
	assert(scalar != 0);
	polynome tmp;
	tmp.divide(*this,scalar);
	return tmp;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Opérateur pour la division unaire d'un polynome par un scalaire.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
polynome & polynome::operator /=(const double & scalar)
{
	assert(scalar != 0);
	divide(scalar);
	return *this;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Méthode pour faire un changement de variable linéaire.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
polynome polynome::scale(const double & scalar) 
{
	int i , degree;
	double scalingFactor;	

	polynome scaledPolynome;

	scaledPolynome.clear();
	
	i=0;
	scalingFactor =1;

	for(degree=begin() ; degree != end() ; degree = next(i)) {

		for( ; i < degree ; i++) {
			scalingFactor *= scalar;
		}

		scaledPolynome.setData(degree , scalingFactor * getData(degree));
	}
	
	return scaledPolynome;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Méthode pour donner au polynome une valeur constante.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void polynome::setPolynomeCoefficients(const double & value)
{
	clear();
	setData(0,value);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Méthode Recopier la valeur d'un polynome.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void polynome::setPolynomeCoefficients(const polynome & poly)
{
	copy(poly);
}
